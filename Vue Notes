Good to know:

- Using a cdn, you can just include the following to use vue without installing it: <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

- In the network tab, you can use the no throttling dropdown to test out your code with various network throughput.
- You can use v-cloak to hide the loading of a element, for example when it originally loaded the firstname, you would see {{}} before John Doe, to fix this you can add a v-cloak to a div and set a custom css for it like so: div v-cloak. Css: [v-cloak] { display:none} do this in main.css

- v-bind:href is the same as :href, this allows us to bind elements to certain logic/code

- by adding @keyup.enter to a input, you can have vue trigger that field ona specific key interaction(enter, space, etc)

- trim removes whitespace from input v-model.lazy.trim

- Computed properties: data-bind certain information together by using a computed property, good for reactive data, it helps to simplify logic: https://vuejs.org/guide/essentials/computed.html#basic-example

- A computed property is a value that can be derived from other stored value. It calculates or computes from other values resulting in a new property.

- Watchers:

- v-show changes the display css property, if false,t hen display will be set to none, does not work with v-else, does not work with template/template

- v-if will remove or add the element depending on the conditon, works with v-else, works with template, cheap on load, expensive on toggle

- compile: to take in something and covert it into something else

- The virtual Dom is a javascript object. it is a lightweight copy of the actual DOM. Its faster to perform comparisons and updates on the Virutal DOM than it
  it is to perform them on the actual DOM

- open -a 'visual studio code' open index.html (that will open a browser with the file)

- to runa a script, use node scriptName

- Components: Sections of your application (Header, footer, posts, lists, etc)

- to set a component to be global, use the component in src/main.js:
  import { createApp } from 'vue'
  import App from './App.vue'
  import Greeting from "@/components/Greeting.vue"

let vm = createApp(App)

vm.component("Greeting", Greeting)

vm.mount('#app')

- To Set a component locally: add it like so:
  <temmplate>
  <Greeting />
  </template>

<script>
import Greeting from "@/components/Greeting.vue"
export default {
  name: 'App',
  components: { 
    Greeting 
  },
}
</script>

- npm install sass --save-dev will set the dependency to be a development only dependency

Props:

- Using props, a parent element is able to share information with its children
- Basic example of passing a prop from a parent to child:

App.vue:
<!-- <template>

  <h3>Hey</h3>
  <!-- this is allowing the age to be passed as a prop to the child elements -->
  <!-- <Greeting :age="age" />
  <User :age="age" />
</template>

<script>
import Greeting from "@/components/Greeting.vue"
import User from "@/components/User.vue"
export default {
  name: 'App',
  components: { 
    Greeting,
    User
  },
  data() {
    return {
      // Defining the age
      age: 20
    }
  }
}
</script> -->

User.vue:
<!-- <template>

  <p>The user is {{ age }} years old</p>
</template>
<script>
export default {
  name: "User",
  props: ["age"]
}
</script> --> -->

Props event emit example child to parent
<!-- <template>
<button type="button" @click="onClickAge">Update Age</button>

  <p>The user is {{ age }} years old</p>
  <p>{{ ageDoubled }}</p>
</template>
<script>
export default {
  name: "User",
  props: ['age'],
  emits: ['age-change'],
  computed: {
    ageDoubled() {
      return this.age * 2
    }
  },
  methods: {
    // emits event that passes information back to parent
    onClickAge() {
      this.$emit('age-change', 3)
    }
  }
}
</script>

<template>
  <h3>Hey</h3>
  <Greeting :age="age" />
  <User :age="age" @age-change="updateAge" />
</template> -->

<!-- <script>
import Greeting from "@/components/Greeting.vue"
import User from "@/components/User.vue"

export default {
  name: 'App',
  components: { 
    Greeting,
    User
  },
  data() {
    return {
      age: 20
    }
  },
  methods: {
    updateAge(num) {
      this.age += num
    }
  }
}
</script> -->

SLOTS EXAMPLES:

To setup format on save:

- file/prefernces/settings/format on save
- in settings: Look for default formatter and set it to prettier

- ctrl shift p, look for user settings and add the following to the bottom fot he file:
  "editor.codeActionsOnSave": {
  "source.fixAll.eslint": true
  }


State:
  - State refers to the data of your application. Retrieved from DB or API
  - Application data: show dropdown, show modal, current fa-pagelines

Validation:

Validation Process:
- use the <Field /> component
- Assign a name to the input
- Add the rules
- Handle the errors
- npm install @vee-validate/rules

When are inputs validated:
- after the change event
- after the change event is applied to a input, when the model is changed
- after the blur event
- after form submission

Firebase setup:
https://firebase.google.com/
https://firebase.google.com/docs/rules
https://firebase.google.com/docs/web/setup
Got to your project, select authentication, select email/password, enable fa-italic
Now go to the firebase.js file and add in the following:
import 'firebase/auth'
import 'firebase/firestore';
Go to storage/rules in firebase and modify the rules to the following:
<!-- rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read: if true;
      allow write: if request.auth.uid != null &&
      	request.resource.contentType == 'audio/mpeg' &&
      	request.resource.size < 10 * 1024 * 1024;
      allow delete: if request.auth != null;
    }
  }
} -->


What is stateless authentication:
- The server does not actively keep track of whos logged in.
- A token is used to verify the user instead

- Path parameters: should be used for returning a single resource or multiple resources
- Query Parameters: should be used for sorting/filtering through data

Playing videos in the browser:
- Download Howler.js https://howlerjs.com/
- npm install howler
- create a new store to help with managing playing videos
- player store example:
import { defineStore } from 'pinia'
import { Howl } from 'howler'

export default defineStore('player', {
  state: () => ({
    currentSong: {},
    sound: {}
  }),
  actions: {
    async newSong(song) {
      this.current_song = song

      // creates a new howl instance that tracks the song playing state
      this.sound = new Howl({
        src: [song.url],
        html5: true
      })

      this.sound.play()
    }
  }
})

$tc allows translations with pluralization


